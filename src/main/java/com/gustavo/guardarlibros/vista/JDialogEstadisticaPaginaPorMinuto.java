/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.gustavo.guardarlibros.vista;

import com.gustavo.guardarlibros.modelo.Lectura;
import com.gustavo.guardarlibros.modelo.Libro;
import com.gustavo.guardarlibros.modelo.Perfil;
import com.gustavo.guardarlibros.utils.DiaLectura;
import com.gustavo.guardarlibros.utils.LecturaUtilImpl;
import com.gustavo.guardarlibros.utils.LibroUtilImpl;
import java.awt.BorderLayout;
import java.awt.RenderingHints;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;

/**
 *
 * @author gusta
 */
public class JDialogEstadisticaPaginaPorMinuto extends javax.swing.JDialog {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(JDialogEstadisticaPaginaPorMinuto.class.getName());

    private Libro libroSeleccionado = null;
    private Perfil perfil = new Perfil();

    private LecturaUtilImpl lecturaUtilImpl = new LecturaUtilImpl();

    /**
     * Creates new form JDialogEstadisticaProgresoPorLibro
     */
    public JDialogEstadisticaPaginaPorMinuto(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

    }

    public JDialogEstadisticaPaginaPorMinuto(java.awt.Frame parent, boolean modal, Perfil perfil) {
        super(parent, modal);
        initComponents();

        this.perfil = perfil;

        lblPerfil.setText("Para el Perfil: " + this.perfil.getNombre());

        cargarCbLibros();

    }

    private void cargarCbLibros() {
        List<Lectura> liLecturas = lecturaUtilImpl.getListadoLibrosTerminadosYNoTermiandosPorPerfil(perfil.getId());

        List<Libro> liLibros = liLecturas.stream()
                .map(Lectura::getLibro)
                .collect(Collectors.toList());

        Libro nuevoLibro = new Libro();
        nuevoLibro.setId(-1);
        nuevoLibro.setNombre("Todos los Libros");
        nuevoLibro.setAutor("Todos los autores");
        liLibros.add(0, nuevoLibro);

        DefaultComboBoxModel modelLibros = new DefaultComboBoxModel(liLibros.toArray());

        cbLibros.setModel(modelLibros);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPanelPrincipal = new javax.swing.JPanel();
        lblPerfil = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cbLibros = new javax.swing.JComboBox<>();
        jPanelLienzo = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Páginas Por Minuto");

        lblPerfil.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPerfil.setText("Para el perfil: ");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Libro:");

        cbLibros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLibrosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelLienzoLayout = new javax.swing.GroupLayout(jPanelLienzo);
        jPanelLienzo.setLayout(jPanelLienzoLayout);
        jPanelLienzoLayout.setHorizontalGroup(
            jPanelLienzoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelLienzoLayout.setVerticalGroup(
            jPanelLienzoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 294, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout JPanelPrincipalLayout = new javax.swing.GroupLayout(JPanelPrincipal);
        JPanelPrincipal.setLayout(JPanelPrincipalLayout);
        JPanelPrincipalLayout.setHorizontalGroup(
            JPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPanelPrincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelLienzo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(JPanelPrincipalLayout.createSequentialGroup()
                        .addComponent(lblPerfil, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbLibros, 0, 245, Short.MAX_VALUE)))
                .addContainerGap())
        );
        JPanelPrincipalLayout.setVerticalGroup(
            JPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelPrincipalLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(JPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPerfil, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbLibros, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanelLienzo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPanelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPanelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cbLibrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLibrosActionPerformed
        // TODO add your handling code here:

        this.libroSeleccionado = (Libro) cbLibros.getSelectedItem();

        if (libroSeleccionado != null) {
            mostrarGraficoDeLineas();
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Libro.", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_cbLibrosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JDialogEstadisticaPaginaPorMinuto dialog = new JDialogEstadisticaPaginaPorMinuto(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private ChartPanel crearSimpleLineChart() {
        List<DiaLectura> datos = obtenerDatosLectura();

        // Filtrar datos inválidos
        datos = datos.stream()
                .filter(dl -> dl.getMinutosLeidos() != null && dl.getMinutosLeidos() > 0
                && dl.getPaginasLeidas() != null && dl.getPaginasLeidas() > 0)
                .collect(Collectors.toList());

        if (datos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay datos de lectura válidos para mostrar en el gráfico.", "Información", JOptionPane.INFORMATION_MESSAGE);
            return null;
        }

        TimeSeries serie = new TimeSeries(libroSeleccionado.getId() == -1
                ? "Velocidad Promedio Diaria"
                : "PPM - " + libroSeleccionado.getNombre());

        if (libroSeleccionado.getId() == -1) {
            Map<LocalDate, Double> promedioPorFecha = datos.stream()
                    .collect(Collectors.groupingBy(
                            DiaLectura::getFecha,
                            TreeMap::new,
                            Collectors.averagingDouble(DiaLectura::getVelocidadPorMinuto)
                    ));

            promedioPorFecha.forEach((fecha, ppm) -> {
                if (ppm > 0) {
                    serie.add(new Day(fecha.getDayOfMonth(), fecha.getMonthValue(), fecha.getYear()), ppm);
                }
            });
        } else {
            datos.stream()
                    .sorted(Comparator.comparing(DiaLectura::getFecha))
                    .forEach(dia -> {
                        double ppm = dia.getVelocidadPorMinuto();
                        if (ppm > 0) {
                            LocalDate fecha = dia.getFecha();
                            serie.add(new Day(fecha.getDayOfMonth(), fecha.getMonthValue(), fecha.getYear()), ppm);
                        }
                    });
        }

        TimeSeriesCollection dataset = new TimeSeriesCollection(serie);

        JFreeChart chart = ChartFactory.createTimeSeriesChart(
                "Velocidad de Lectura - " + libroSeleccionado.getNombre(),
                "Fecha",
                "Páginas por Minuto (PPM)",
                dataset,
                true,
                true,
                false
        );

        // Forzar formato de fechas en el eje X
        XYPlot plot = chart.getXYPlot();
        DateAxis ejeX = (DateAxis) plot.getDomainAxis();
        ejeX.setDateFormatOverride(new SimpleDateFormat("dd/MM/yyyy"));

        // Anti-aliasing y render hints
        chart.setRenderingHints(new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON));
        chart.setRenderingHints(new RenderingHints(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON));
        chart.setRenderingHints(new RenderingHints(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE));

        return new ChartPanel(chart);
    }

    private List<DiaLectura> obtenerDatosLectura() {
        if (libroSeleccionado == null) {
            return new ArrayList<>();
        }

        if (libroSeleccionado.getId() == -1) {
            return lecturaUtilImpl.getPaginasLeidasEnUnDiaDeTodosLosLibrosPorPerfil(perfil.getId());
        } else {
            return lecturaUtilImpl.getPaginasLeidasEnUnDiaPorLibroYPerfil(perfil.getId(), libroSeleccionado);
        }
    }

    private void mostrarGraficoDeLineas() {
        // Obtener el ChartPanel con el gráfico
        ChartPanel nuevoGraficoPanel = crearSimpleLineChart();

        // 1. Limpiar el jPanelLienzo de cualquier componente anterior
        jPanelLienzo.removeAll();

        // 2. Establecer un Layout Manager adecuado para jPanelLienzo
        // El código generado por el editor utiliza GroupLayout para jPanelLienzo.
        // Para que el ChartPanel se expanda, es mejor establecer BorderLayout.
        jPanelLienzo.setLayout(new BorderLayout());

        // 3. Añadir el nuevo ChartPanel al jPanelLienzo
        jPanelLienzo.add(nuevoGraficoPanel, BorderLayout.CENTER);

        // 4. Pedir a Swing que revalide y repinte el panel para que los cambios se muestren
        jPanelLienzo.revalidate();
        jPanelLienzo.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JPanelPrincipal;
    private javax.swing.JComboBox<String> cbLibros;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanelLienzo;
    private javax.swing.JLabel lblPerfil;
    // End of variables declaration//GEN-END:variables
}
