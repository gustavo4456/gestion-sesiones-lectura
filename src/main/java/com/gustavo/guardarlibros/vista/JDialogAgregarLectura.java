/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.gustavo.guardarlibros.vista;

import com.gustavo.guardarlibros.modelo.Estado;
import com.gustavo.guardarlibros.modelo.Lectura;
import com.gustavo.guardarlibros.modelo.Libro;
import com.gustavo.guardarlibros.modelo.Perfil;
import com.gustavo.guardarlibros.utils.LecturaUtilImpl;
import com.gustavo.guardarlibros.utils.UtilIconos;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import javax.swing.JOptionPane;

/**
 *
 * @author gustavo
 */
public class JDialogAgregarLectura extends javax.swing.JDialog {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(JDialogAgregarLectura.class.getName());

    private LecturaUtilImpl lecturaUtilImpl = new LecturaUtilImpl();

    private Libro libro = new Libro();
    private Perfil perfil = new Perfil();
    private Lectura lectura = new Lectura();

    /**
     * Creates new form JDialogAgregarLectura
     */
    public JDialogAgregarLectura(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

    }

    public JDialogAgregarLectura(java.awt.Frame parent, boolean modal, Lectura lectura, Perfil perfil) {
        super(parent, modal);
        initComponents();
        UtilIconos.aplicarIcono(this);

        this.libro = lectura.getLibro();
        this.perfil = perfil;
        this.lectura = lectura;

        LocalDate fechaActual = LocalDate.now();

        txtFecha.setText(fechaActual.toString());
        txtLibro.setText(libro.getNombre() + " de " + libro.getAutor());
        txtPerfil.setText(perfil.getNombre());
        lblPagina.setText("Pagina (Total " + this.libro.getCantidadPaginas() + ")" + ":");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        panelParaBoton = new javax.swing.JPanel();
        btnLimpiar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        panelParaDatos = new javax.swing.JPanel();
        lblLibro = new javax.swing.JLabel();
        txtLibro = new javax.swing.JTextField();
        lblPerfil = new javax.swing.JLabel();
        txtPerfil = new javax.swing.JTextField();
        lblPagina = new javax.swing.JLabel();
        txtPagina = new javax.swing.JFormattedTextField();
        lblFecha = new javax.swing.JLabel();
        txtFecha = new javax.swing.JFormattedTextField();
        lblTiempo = new javax.swing.JLabel();
        txtTiempo = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Crear nueva lectura");

        lblTitulo.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("Datos de la Lectura");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/limpiar-32.png"))); // NOI18N
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/guardar-32.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelParaBotonLayout = new javax.swing.GroupLayout(panelParaBoton);
        panelParaBoton.setLayout(panelParaBotonLayout);
        panelParaBotonLayout.setHorizontalGroup(
            panelParaBotonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelParaBotonLayout.createSequentialGroup()
                .addContainerGap(131, Short.MAX_VALUE)
                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelParaBotonLayout.setVerticalGroup(
            panelParaBotonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelParaBotonLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(panelParaBotonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        lblLibro.setText("Libro:");
        lblLibro.setToolTipText("Libro en lectra, ya previamente seleccionado.");

        txtLibro.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        txtLibro.setToolTipText("Libro en lectra, ya previamente seleccionado.");
        txtLibro.setEnabled(false);

        lblPerfil.setText("Perfil:");
        lblPerfil.setToolTipText("Perfil de lectura, ya previamente seleccionado.");

        txtPerfil.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        txtPerfil.setToolTipText("Perfil de lectura, ya previamente seleccionado.");
        txtPerfil.setEnabled(false);

        lblPagina.setText("Pagina:");
        lblPagina.setToolTipText("Debe ingresar la pagina donde se quedo al finalizar el tiempo de lectura.");

        txtPagina.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#")) {
            // Bloque de inicialización de instancia para configurar el NumberFormatter
            {
                setMinimum(1); // O 1 si quieres estrictamente positivos (>0)
                setMaximum(null); // Sin límite superior
                setAllowsInvalid(false);
                setOverwriteMode(true);
                ((java.text.DecimalFormat) getFormat()).setParseIntegerOnly(true);
                setCommitsOnValidEdit(true); // Ayuda a que el valor se actualice más rápido
            }

            @Override
            public Object stringToValue(String text) throws java.text.ParseException {
                if (text == null || text.trim().isEmpty()) {
                    return null; // Si el texto está vacío, devuelve null
                }
                // Si no está vacío, usa el comportamiento por defecto del NumberFormatter
                return super.stringToValue(text);
            }

            // Opcional: Esto ayuda a que el campo muestre vacío si su valor es null
            @Override
            public String valueToString(Object value) throws java.text.ParseException {
                if (value == null) {
                    return ""; // Si el valor es null, muestra una cadena vacía
                }
                return super.valueToString(value);
            }
        }));
        txtPagina.setToolTipText("Debe ingresar la pagina donde se quedo al finalizar el tiempo de lectura.");

        lblFecha.setText("Fecha:");
        lblFecha.setToolTipText("Debe ingresar una fecha con el siguente formato AAAA-MM-DD. Ej. 2024-06-12");

        txtFecha.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        txtFecha.setToolTipText("Debe ingresar una fecha con el siguente formato AAAA-MM-DD. Ej. 2024-06-12");

        lblTiempo.setText("Tiempo (min):");
        lblTiempo.setToolTipText("Tiempo en minutos de la sesión de lectura.");

        txtTiempo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#")) {
            // Bloque de inicialización de instancia para configurar el NumberFormatter
            {
                setMinimum(1); // O 1 si quieres estrictamente positivos (>0)
                setMaximum(null); // Sin límite superior
                setAllowsInvalid(false);
                setOverwriteMode(true);
                ((java.text.DecimalFormat) getFormat()).setParseIntegerOnly(true);
                setCommitsOnValidEdit(true); // Ayuda a que el valor se actualice más rápido
            }

            @Override
            public Object stringToValue(String text) throws java.text.ParseException {
                if (text == null || text.trim().isEmpty()) {
                    return null; // Si el texto está vacío, devuelve null
                }
                // Si no está vacío, usa el comportamiento por defecto del NumberFormatter
                return super.stringToValue(text);
            }

            // Opcional: Esto ayuda a que el campo muestre vacío si su valor es null
            @Override
            public String valueToString(Object value) throws java.text.ParseException {
                if (value == null) {
                    return ""; // Si el valor es null, muestra una cadena vacía
                }
                return super.valueToString(value);
            }
        }));
        txtTiempo.setToolTipText("Tiempo en minutos de la sesión de lectura.");

        javax.swing.GroupLayout panelParaDatosLayout = new javax.swing.GroupLayout(panelParaDatos);
        panelParaDatos.setLayout(panelParaDatosLayout);
        panelParaDatosLayout.setHorizontalGroup(
            panelParaDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelParaDatosLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(panelParaDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblPagina)
                    .addComponent(lblFecha)
                    .addComponent(lblPerfil)
                    .addComponent(lblLibro)
                    .addComponent(lblTiempo))
                .addGap(18, 18, 18)
                .addGroup(panelParaDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTiempo, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                    .addComponent(txtLibro)
                    .addComponent(txtPerfil)
                    .addComponent(txtPagina)
                    .addComponent(txtFecha))
                .addContainerGap())
        );
        panelParaDatosLayout.setVerticalGroup(
            panelParaDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelParaDatosLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(panelParaDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLibro)
                    .addComponent(txtLibro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelParaDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPerfil)
                    .addComponent(txtPerfil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelParaDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPagina)
                    .addComponent(txtPagina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(panelParaDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFecha)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelParaDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTiempo)
                    .addComponent(txtTiempo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelPrincipalLayout = new javax.swing.GroupLayout(panelPrincipal);
        panelPrincipal.setLayout(panelPrincipalLayout);
        panelPrincipalLayout.setHorizontalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelParaBoton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelParaDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelPrincipalLayout.setVerticalGroup(
            panelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPrincipalLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelParaDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(panelParaBoton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        txtPagina.setText("");
        txtFecha.setText("");
        txtTiempo.setText("");
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        boolean sePuedeGuardar = !txtLibro.getText().isEmpty() && !txtPerfil.getText().isEmpty() && !txtFecha.getText().isEmpty() && !txtTiempo.getText().isEmpty() && !txtPagina.getText().isEmpty();

        if (sePuedeGuardar) {

            //debo continuar con una forma de que el usuario no pueda ingresar un numero de pagina actual que no supere el limite o que ya se haya leido
            Optional<Integer> ultimaPaginaOpt = lecturaUtilImpl.getUltimaPaginaGuardadaPorLibroEnLectura(perfil.getId(), libro);

            // fecha mas reciente de lectura ya ingresada, es para evitar que el usuario ingrese una fecha pasada, solo puede agregar una fecha posterior a la ultima fecha ingresada.
            Optional<LocalDate> fechaMasRecienteYaIngresadaOptional = lecturaUtilImpl.getFechaMasReciente(perfil.getId(), libro);

            Integer ultimaPaginaLeida = ultimaPaginaOpt.isPresent() ? ultimaPaginaOpt.get() : 0;
            Integer paginaFinalLibro = libro.getCantidadPaginas();

            Integer paginaAGuardar = Integer.valueOf(txtPagina.getText());

            boolean esValidaLaPaginaIngresada = paginaAGuardar > ultimaPaginaLeida && paginaAGuardar <= paginaFinalLibro && ultimaPaginaLeida < paginaFinalLibro;
            boolean esLaPaginaIngresaLaUltimaDelLibro = paginaAGuardar.equals(paginaFinalLibro);

            boolean esValidaLaFechaAIngresar = false;

            if (fechaMasRecienteYaIngresadaOptional.isPresent()) {
                esValidaLaFechaAIngresar = LocalDate.parse(txtFecha.getText()).isAfter(fechaMasRecienteYaIngresadaOptional.get());
            } else {
                esValidaLaFechaAIngresar = true;
            }

            if (!LocalDate.parse(txtFecha.getText()).isAfter(LocalDate.now())) {
                if (esValidaLaFechaAIngresar) {
                    if (esValidaLaPaginaIngresada) {

                        List<Integer> ids = lecturaUtilImpl.getIds();

                        Lectura nuevaLectura = new Lectura();

                        if (esLaPaginaIngresaLaUltimaDelLibro) {

                            nuevaLectura.setId(ids);
                            nuevaLectura.setLibro(libro);
                            nuevaLectura.setPerfil(perfil);
                            nuevaLectura.setFechaInicio(LocalDate.parse(txtFecha.getText()));
                            nuevaLectura.setMinutosLeidos(Integer.valueOf(txtTiempo.getText()));
                            nuevaLectura.setPaginaActual(Integer.valueOf(txtPagina.getText()));
                            nuevaLectura.setEstado(Estado.LEYENDO);

                            lecturaUtilImpl.crearArchivo(nuevaLectura, true);

                            //ACA DEBO MODIFICAR LA LECTURA QUE ESTA EN ESTADO DE NO_LEIDO Y PASARLO A TERMINADO
                            lecturaUtilImpl.actualizarEstadoYFechaDeUnaLectura(lectura, Estado.TERMINADO);

                            JOptionPane.showMessageDialog(this, "Acaba de ingresar la ultima pagina del libro. Su libro pasara a la lista de Libros terminados.", "Información", JOptionPane.INFORMATION_MESSAGE);

                        } else {

                            nuevaLectura.setId(ids);
                            nuevaLectura.setLibro(libro);
                            nuevaLectura.setPerfil(perfil);
                            nuevaLectura.setFechaInicio(LocalDate.parse(txtFecha.getText()));
                            nuevaLectura.setMinutosLeidos(Integer.valueOf(txtTiempo.getText()));
                            nuevaLectura.setPaginaActual(Integer.valueOf(txtPagina.getText()));
                            nuevaLectura.setEstado(Estado.LEYENDO);

                            lecturaUtilImpl.crearArchivo(nuevaLectura, true);

                            JOptionPane.showMessageDialog(this, "Se guardo la lectura.", "Exito", JOptionPane.INFORMATION_MESSAGE);
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "Ingrese un número de página adecuada. No puede ser menor o igual al la pagina de la ultima lectura. (Total de paginas: " + libro.getCantidadPaginas() + ").", "Advertencia", JOptionPane.WARNING_MESSAGE);

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Ingrese una fecha Valida, no puede colocar una fecha que sea anterior a las fechas de lecturas pasadas. ", "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No puede ingresar Fechas futuras.", "Advertencia", JOptionPane.WARNING_MESSAGE);

            }

        } else {
            JOptionPane.showMessageDialog(this, "Complete todos los campos.", "Advertencia", JOptionPane.WARNING_MESSAGE);

        }


    }//GEN-LAST:event_btnGuardarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JDialogAgregarLectura dialog = new JDialogAgregarLectura(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblLibro;
    private javax.swing.JLabel lblPagina;
    private javax.swing.JLabel lblPerfil;
    private javax.swing.JLabel lblTiempo;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel panelParaBoton;
    private javax.swing.JPanel panelParaDatos;
    private javax.swing.JPanel panelPrincipal;
    private javax.swing.JFormattedTextField txtFecha;
    private javax.swing.JTextField txtLibro;
    private javax.swing.JFormattedTextField txtPagina;
    private javax.swing.JTextField txtPerfil;
    private javax.swing.JFormattedTextField txtTiempo;
    // End of variables declaration//GEN-END:variables
}
